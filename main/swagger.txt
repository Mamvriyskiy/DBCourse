openapi: 3.0.3
info:
  title: Swagger Petstore - OpenAPI 3.0
  description: |-
    This is a sample Pet Store Server based on the OpenAPI 3.0 specification.  You can find out more about
    Swagger at [https://swagger.io](https://swagger.io). In the third iteration of the pet store, we've switched to the design first approach!
    You can now help us improve the API whether it's by making changes to the definition itself or to the code.
    That way, with time, we can improve the API in general, and expose some of the new features in OAS3.

    _If you're looking for the Swagger 2.0/OAS 2.0 version of Petstore, then click [here](https://editor.swagger.io/?url=https://petstore.swagger.io/v2/swagger.yaml). Alternatively, you can load via the `Edit > Load Petstore OAS 2.0` menu option!_
    
    Some useful links:
    - [The Pet Store repository](https://github.com/swagger-api/swagger-petstore)
    - [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)
  termsOfService: http://swagger.io/terms/
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.11
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
  - url: https://petstore3.swagger.io/api/v3
tags:
  - name: auth
    description: Access to the system
  - name: home
    description: Operations about house
  - name: access
    description: Operations about user
  - name: devices
    description: Operations about devices
paths:
  /auth/sign-up:
    post:
      tags:
        - auth
      summary: Registration of new users
      description: Registration of users in the system using a password, email and login
      # operationId: updatePet
      requestBody:
        description: Adding new users to the system using a password, email, and login
        content:
          application/json:
            schema:
              type: object
              properties:
                password:
                  type: string
                  example: "abcd"
                username: 
                  type: string
                  example: "user"
                email:
                  type: string
                  example: "email@mail.ru"
                
        required: true
      responses:
        '200':
          description: Successful operation
        '400':
          description: Invalid data value
        '404':
          description: Auth not found
        '409':
          description: A user with such an email has already been registered
        '500':
          description: Internal error on the server
      security:
        - petstore_auth:
            - write:auth
            - read:auth
  /auth/sign-in:
    post:
      tags:
        - auth
      summary: User authentication
      description: User authentication by mail and password
      requestBody:
        description: Search for a user in the system using the specified email and password
        content:
          application/json:
            schema:
              type: object
              properties:
                password:
                  type: string
                  example: "abcd"
                email:
                  type: string
                  example: "email@mail.ru"
                
        required: true
        
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE3MjY3NzgxNjUsImlhdCI6MTcyNjczNDk2NSwidXNlcklkIjoxfQ.aboYTZrft9YR1q59Q7u9AdyVhUDsi5ep4Pfzicde-5Y"
                  
        '400':
          description:  Invalid data value
        '500':
          description: Internal error on the server
      security:
        - petstore_auth:
            - write:auth
            - read:auth
  /auth/sendcode:
    post:
      tags:
        - auth
      summary: Update password
      description: Sending the recovery code to the mail
      requestBody:
        description: Sending the recovery code to the specified email address
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: "email@mail.ru"
                
        required: true
        
      responses:
        '200':
          description: successful operation
        '400':
          description: Invalid email
        '500':
          description: Internal error on the server
      security:
        - petstore_auth:
            - write:auth
            - read:auth
  /auth/checkcode:
    post:
      tags:
        - auth
      summary:  Checking the sent code
      description: Checking the verification code sent to the mail
      requestBody:
        description: Checking the verification code sent to the mail
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: "1a2b3c"
                
        required: true
        
      responses:
        '200':
          description: successful operation
        '400':
          description: Invalid code
        '500':
          description: Internal error on the server
      security:
        - petstore_auth:
            - write:auth
            - read:auth
  /auth/newpassword:
    post:
      tags:
        - auth
      summary:  Update password
      description: Update password
      requestBody:
        description: Checking the entered passwords for a match and updating it in the system
        content:
          application/json:
            schema:
              type: object
              properties:
                password:
                  type: string
                  example: "abcd"
                repeatpassword:
                  type: string
                  example: "abcd"
                
        required: true
        
      responses:
        '200':
          description: successful operation
        '400':
          description: Invalid password
        '500':
          description: Internal error on the server
      security:
        - petstore_auth:
            - write:auth
            - read:auth
            
  /home/create:
    post:
      tags:
        - home
      summary: Create a new home
      description: Creating a new home by the user
      
      requestBody:
        description: Creating a new house by name, geogrpahcoords
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: "home"
                geographcoors:
                  type: object
                  properties:
                    latitude:
                      type: number
                      format: float
                      example: 37.7749
                    longitude:
                      type: number
                      format: float
                      example: -122.4194
                
        required: true
        
      responses:
        '200':
          description: successful operation
        '400':
          description: Invalid data value
        '500':
          description: Internal error on the server
            
  /home/delete:
    delete:
      tags:
        - home
      summary: Delete home
      description: Removal of the house by the owner by name
      responses:
        '200':
          description: successful operation
        '403':
          description: Access denied due to insufficient permissions
        '500':
          description: Internal error on the server
          
  /home/update:
    put:
      tags:
        - home
      summary: Updating the home name
      description: Updating the home name
      requestBody:
        description: Updating the home name
        content:
          application/json:
            schema:
              type: object
              properties:
                lastname:
                  type: string
                  example: "home"
                newname:
                  type: string
                  example: "home2"
                
        required: true
        
      responses:

        '200':
          description:  successful operation
        '403':
          description: Access denied due to insufficient permissions
        '500':
          description: Internal error on the server
    
  /home/list:
    get:
      tags:
        - home
      summary: List of user's houses
      description: Get a list of the user's houses
      responses:

        '200':
          description:  successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                  example: ["home1", "home2"]


        '500':
          description: Internal error on the server
          
  /access/add:
    post:
      tags:
        - access
      summary: Adding a user to the house
      description: Adding a user to the house by specified mail
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email: 
                  type: string 
                  example: "123@mail.ru"
                home: 
                  type: string 
                  example: "home"
              
      responses:
        '200':
          description: Successful operation

  /access/delete:
    delete:
      tags:
        - access
      summary: Remove a user from home
      description:  Remove a user from home
      responses:
        '200':
          description: successful operation
        '403':
          description: Access denied due to insufficient permissions
        '500':
          description: Internal error on the server
          
  /access/getlist:
    get:
      tags:
        - access
      summary: List of user's houses
      description: Get a list of the user's houses
      responses:

        '200':
          description:  successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                  example: ["user1", "user2"]

        '500':
          description: Internal error on the server
          
  /access/level:
    put:
      tags:
        - access
      summary: Update the user's access level
      description: Update the user's access level
      requestBody:
        description: Update the user's access level
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: "user1"
                newlevel:
                  type: integer
                  example: 3
                
        required: true
        
      responses:

        '200':
          description:  successful operation
        '403':
          description: Access denied due to insufficient permissions
        '500':
          description: Internal error on the server
    
  /devices/create:
    post:
      tags:
        - devices
      summary: Add a device
      description: Add a new device to your home
      
      requestBody:
        description: Add a new device to your home
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: "dev1"
                home:
                  type: string
                  example: "home1"
               
        required: true
        
      responses:
        '200':
          description: successful operation
        '400':
          description: Invalid data value
        '500':
          description: Internal error on the server
    
  /devices/getlist:
    get:
      tags:
        - devices
      summary: List of devices houses
      description: Get a list of the devices houses
      responses:

        '200':
          description:  successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                  example: ["dev1", "dev1"]

        '500':
          description: Internal error on the server

  /devices/delete:
    delete:
      tags:
        - devices
      summary: Remove a device from home
      description:  Remove a device from home
      responses:
        '200':
          description: successful operation
        '403':
          description: Access denied due to insufficient permissions
        '500':
          description: Internal error on the server
          
  /devices/startdevice:
    post:
      tags:
        - devices
      summary: Start the device
      description: Start the device
      
      requestBody:
        description: Start the device
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: "dev1"
                home:
                  type: string
                  example: "home1"
               
        required: true
        
      responses:
        '200':
          description: successful operation
        '400':
          description: Invalid data value
        '500':
          description: Internal error on the server
           
  /devices/getlisthistory:
    get:
      tags:
        - devices
      summary: List of device history
      description: Get a list of device history
      responses:
        '200':
          description: A list of devices' history records.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    timework:
                      type: integer
                      description: Total time worked by the device
                      example: 120
                    average:
                      type: number
                      format: float
                      description: Average indicator value
                      example: 23.5
                    energy:
                      type: integer
                      description: Energy consumed by the device
                      example: 300
        '500':
          description: Internal error on the server
          
components:
  schemas:
    Order:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        petId:
          type: integer
          format: int64
          example: 198772
        quantity:
          type: integer
          format: int32
          example: 7
        shipDate:
          type: string
          format: date-time
        status:
          type: string
          description: Order Status
          example: approved
          enum:
            - placed
            - approved
            - delivered
        complete:
          type: boolean
      xml:
        name: order
    Customer:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 100000
        username:
          type: string
          example: fehguy
        address:
          type: array
          xml:
            name: addresses
            wrapped: true
          items:
            $ref: '#/components/schemas/Address'
      xml:
        name: customer
    Address:
      type: object
      properties:
        street:
          type: string
          example: 437 Lytton
        city:
          type: string
          example: Palo Alto
        state:
          type: string
          example: CA
        zip:
          type: string
          example: '94301'
      xml:
        name: address
    Category:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: Dogs
      xml:
        name: category
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        username:
          type: string
          example: theUser
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: James
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: '12345'
        phone:
          type: string
          example: '12345'
        userStatus:
          type: integer
          description: User Status
          format: int32
          example: 1
      xml:
        name: user
    Tag:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: tag
    Pet:
      required:
        - name
        - photoUrls
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        name:
          type: string
          example: doggie
        category:
          $ref: '#/components/schemas/Category'
        photoUrls:
          type: array
          xml:
            wrapped: true
          items:
            type: string
            xml:
              name: photoUrl
        tags:
          type: array
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/Tag'
        status:
          type: string
          description: pet status in the store
          enum:
            - available
            - pending
            - sold
      xml:
        name: pet
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
      xml:
        name: '##default'
  requestBodies:
    Pet:
      description: Pet object that needs to be added to the store
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Pet'
        application/xml:
          schema:
            $ref: '#/components/schemas/Pet'
    UserArray:
      description: List of user object
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'
  securitySchemes:
    petstore_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://petstore3.swagger.io/oauth/authorize
          scopes:
            write:pets: modify pets in your account
            read:pets: read your pets
    api_key:
      type: apiKey
      name: api_key
      in: header